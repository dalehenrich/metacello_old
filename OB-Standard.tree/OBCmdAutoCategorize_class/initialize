
!OBCmdAutoCategorize class methodsFor: 'initialization' stamp: 'lr 12/1/2010 19:01'!
initialize
	IgnoredCategories := Array with: Categorizer default with: Categorizer allCategory with: Categorizer nullCategory.
	CategorizationRules := OrderedCollection new.
	CategorizationRules
		add: [ :class :selector | self superclassProtocolFor: selector in: class ];
		add: [ :class :selector | (selector beginsWith: 'add') ifTrue: [ #adding ] ];
		add: [ :class :selector | (selector beginsWith: 'as') ifTrue: [ #converting ] ];
		add: [ :class :selector | (selector beginsWith: 'accept') ifTrue: [ #visiting ] ];
		add: [ :class :selector | (selector beginsWith: 'remove') ifTrue: [ #removing ] ];
		add: [ :class :selector | (selector beginsWith: 'render') ifTrue: [ #rendering ] ];
		add: [ :class :selector | (selector beginsWith: 'initialize') ifTrue: [ #initialization ] ];
		add: [ :class :selector | ((selector beginsWith: 'is') or: [ selector beginsWith: 'has' ]) ifTrue: [ #testing ] ];
		add: [ :class :selector | ((class includesBehavior: TestCase) and: [ selector beginsWith: 'test' ]) ifTrue: [ #tests ] ];
		add: [ :class :selector | ((selector beginsWith: 'basic') or: [ (selector beginsWith: 'private') or: [ selector beginsWith: 'primitive' ] ]) ifTrue: [ #private ] ];
		add: [ :class :selector | (class isMeta and: [ (selector beginsWith: 'new') or: [ (selector beginsWith: 'on') or: [ selector beginsWith: 'with' ] ] ]) ifTrue: [ #'instance creation' ] ];
		add: [ :class :selector | ((selector numArgs = 0 and: [ class allInstVarNames includes: selector asString ]) or: [ selector numArgs = 1 and: [ class allInstVarNames includes: selector asString allButLast ] ]) ifTrue: [ #accessing ] ];
		
		add: [ :class :selector | self commonProtocolFor: selector in: class ]! !
